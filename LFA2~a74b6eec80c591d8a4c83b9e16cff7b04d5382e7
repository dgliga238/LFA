import java.util.*;

public class Grammar {
    private static final char[] VN = {'S', 'F', 'D'};
    private static final char[] VT = {'a', 'b', 'c'};
    private static final String[] P = {
            "S → aF",
            "F → bF",
            "F → cD",
            "S → bS",
            "D → cS",
            "D → a",
            "F → a"
    };
    private static final Random random = new Random();

    private static final Map<Character, String> symbolTypes = new HashMap<>();
    static {
        for (char vn : VN) {
            symbolTypes.put(vn, "Non-Terminal");
        }
        for (char vt : VT) {
            symbolTypes.put(vt, "Terminal");
        }
    }

    public static List<String> generateStrings(int count) {
        List<String> strings = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            StringBuilder sb = new StringBuilder();
            generateString('S', sb);
            strings.add(sb.toString());
        }
        return strings;
    }

    private static void generateString(char symbol, StringBuilder sb) {
        if (isTerminal(symbol)) {
            sb.append(symbol);
        } else {
            List<String> productions = getProductionsForNonTerminal(symbol);
            String selectedProduction = productions.get(random.nextInt(productions.size()));
            for (char c : selectedProduction.toCharArray()) {
                if (c != '→' && c != ' ') {
                    generateString(c, sb);
                }
            }
        }
    }

    private static boolean isTerminal(char symbol) {
        return symbolTypes.get(symbol).equals("Terminal");
    }

    private static List<String> getProductionsForNonTerminal(char symbol) {
        List<String> productions = new ArrayList<>();
        for (String production : P) {
            if (production.charAt(0) == symbol) {
                productions.add(production.substring(4));
            }
        }
        return productions;
    }

    public static String classifyGrammar() {
        if (isChomskyType3()) {
            return "Type 3";
        } else if (isChomskyType2()) {
            return "Type 2";
        } else if (isChomskyType1()) {
            return "Type 1";
        } else if (isChomskyType0()) {
            return "Type 0";
        } else {
            return "Unknown Type";
        }
    }

    private static boolean isChomskyType0() {
        // Specific checks for Type 0
        return true;
    }

    private static boolean isChomskyType1() {
        for (String production : P) {
            String[] parts = production.split("→");
            if (parts.length == 2) {
                String alpha = parts[0].trim();
                String beta = parts[1].trim();
                if (alpha.length() > beta.length() || beta.isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean isChomskyType2() {
        for (String production : P) {
            String[] parts = production.split("→");
            if (parts.length == 2) {
                String nonTerminal = parts[0].trim();
                String gamma = parts[1].trim();
                if (nonTerminal.length() == 1 && VNContains(nonTerminal) && isChomskyType2String(gamma)) {
                    continue;
                } else {
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean isChomskyType2String(String str) {
        for (char c : str.toCharArray()) {
            if (!isTerminal(c) && !VNContains(String.valueOf(c))) {
                return false;
            }
        }
        return true;
    }

    private static boolean isChomskyType3() {
        for (String production : P) {
            String[] parts = production.split("→");
            if (parts.length == 2) {
                String left = parts[0].trim();
                String right = parts[1].trim();
                if (left.length() == 1 && VNContains(left) && right.length() <= 2) {
                    if (right.length() == 1 && isTerminal(right.charAt(0))) {
                        continue;
                    } else if (right.length() == 2 && isTerminal(right.charAt(0)) && VNContains(String.valueOf(right.charAt(1)))) {
                        continue;
                    }
                }
                return false;
            }
        }
        return true;
    }

    private static boolean VNContains(String symbol) {
        return symbolTypes.containsKey(symbol.charAt(0)) && symbolTypes.get(symbol.charAt(0)).equals("Non-Terminal");
    }
}
